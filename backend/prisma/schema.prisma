// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  projects      Project[]
  ProjectMember ProjectMember[]
}

// Enum para Roles de Usuarios
enum Role {
  ADMIN
  QA_ENGINEER
  DEVELOPER
  USER
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  testPlans   TestPlan[]
  ownerId     Int
  owner       User            @relation(fields: [ownerId], references: [id])
  members     ProjectMember[]
}

model ProjectMember {
  projectId Int
  userId    Int
  role      Role

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model TestPlan {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id])
  testCases   TestCase[]
}

model TestCase {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  expectedResult String
  testPlanId     Int
  testPlan       TestPlan        @relation(fields: [testPlanId], references: [id])
  executions     TestExecution[]
  Defect         Defect[]
}

model TestExecution {
  id         Int        @id @default(autoincrement())
  testCaseId Int
  testCase   TestCase   @relation(fields: [testCaseId], references: [id])
  executedBy Int
  result     TestResult
  executedAt DateTime   @default(now())
  evidence   String?
}

enum TestResult {
  PASSED
  FAILED
  BLOCKED
  SKIPPED
}

model Defect {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      DefectStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  reportedBy  Int
  assignedTo  Int?
  testCaseId  Int?
  testCase    TestCase?    @relation(fields: [testCaseId], references: [id])
}

enum DefectStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
